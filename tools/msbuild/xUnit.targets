<!--
***********************************************************************************************
xUnit.targets

***********************************************************************************************
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<xUnitRunnerAssembly Condition=" $(xUnitRunnerAssembly) == '' ">..\..\packages\xunit.1.9.2\lib\net20\xunit.runner.msbuild.dll</xUnitRunnerAssembly>
		<!-- Use msbuild ... /p:xUnitVerbose=true for Verbose test output-->
		<!-- Use msbuild ... /p:ContinueOnxUnitFailures=true to continue the build even when tests fail. -->
		<xUnitVerbose Condition=" $(XUnitVerbose) == '' ">False</xUnitVerbose>
		<ContinueOnxUnitFailures Condition=" $(ContinueOnxUnitFailures) == '' ">False</ContinueOnxUnitFailures>
	</PropertyGroup>

	<!-- UsingTask should now be defined by xunit.runner.msbuild.props 
	<UsingTask AssemblyFile="$(xUnitRunnerAssembly)"
			TaskName="Xunit.Runner.MSBuild.xunit" /> -->
	
	<!-- msbuild /t:Test [/p:xUnitVerbose][/p:ContinueOnxUnitFailures]
	
	Runs all tests in the current target assembly.
	-->
	<Target Name="Test">
		<!-- Run build if $(TargetPath) doesn't exist; if it does exist, don't rebuild automatically.
		In other words, tests are re-run on old builds. If you want a build, specify both targets, eg msbuild /t:build,test	-->
		<CallTarget Targets="build" Condition=" !Exists('$(TargetPath)') " />

		<xunit Assemblies="$(TargetPath)" 
					 Verbose="$(xUnitVerbose)" 
					 SerializeTestCases="true"
					 ContinueOnError="$(ContinueOnxUnitFailures)" />
	</Target>

</Project>